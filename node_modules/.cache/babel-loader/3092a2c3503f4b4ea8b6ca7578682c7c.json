{"ast":null,"code":"import { objectSpread2 as _objectSpread2 } from '../_virtual/_rollupPluginBabelHelpers.js';\nimport { colorGuide } from './colors.js';\nimport { typographyGuide } from './typography.js';\nvar buttonTypography = typographyGuide.buttons;\nvar getButtonColors = function getButtonColors(mode, variant, kind) {\n  var colors = mode === 'dark' ? colorGuide.darkComponents.buttons : colorGuide.lightComponents.buttons;\n  var transparentEdge = kind === 'elevated' ? {\n    top: 'transparent',\n    left: 'transparent'\n  } : {};\n  return variant === 'primary' ? _objectSpread2(_objectSpread2({}, colors.primary), {}, {\n    mode: mode,\n    edgeColors: _objectSpread2(_objectSpread2({}, colors.primary.edgeColors), transparentEdge)\n  }) : _objectSpread2(_objectSpread2({}, colors.secondary), {}, {\n    mode: mode,\n    edgeColors: _objectSpread2(_objectSpread2({}, colors.secondary.edgeColors), transparentEdge)\n  });\n};\nvar getSize = function getSize(number) {\n  switch (number) {\n    case '50':\n      return 'big';\n    case '40':\n      return 'medium';\n    case '30':\n      return 'small';\n    default:\n      return 'medium';\n  }\n};\nvar sizeConfig = {\n  big: {\n    height: '50px',\n    padding: '0px 30px',\n    iconHeight: '20px'\n  },\n  medium: {\n    height: '40px',\n    padding: '0px 20px',\n    iconHeight: '16px'\n  },\n  small: {\n    height: '30px',\n    padding: '0px 25px',\n    iconHeight: '14px'\n  }\n};\nvar getSpacingConfig = function getSpacingConfig(size) {\n  switch (size) {\n    case 'big':\n      return sizeConfig.big;\n    case 'medium':\n      return sizeConfig.medium;\n    case 'small':\n      return sizeConfig.small;\n    default:\n      return sizeConfig.medium;\n  }\n};\nvar getTextStyle = function getTextStyle(size) {\n  switch (size) {\n    case 'big':\n      return buttonTypography.big;\n    case 'medium':\n      return buttonTypography.medium;\n    case 'small':\n      return buttonTypography.small;\n    default:\n      return buttonTypography.medium;\n  }\n};\n/** ****************************************************************************************** */\n// New Configs\n\nvar getButtonConfig = function getButtonConfig(name) {\n  var colorMode = name.slice(1, 2) === 'l' ? 'light' : 'dark';\n  var variant = name.slice(2, 3) === 's' ? 'secondary' : 'primary';\n  var size = name.slice(3, 5);\n  var kind = name.slice(5, 6) === 'p' ? 'elevated' : 'flat';\n  var arrow = name.slice(6, 7);\n  var config = {\n    colorConfig: getButtonColors(colorMode, variant, kind),\n    spacingConfig: getSpacingConfig(getSize(size)),\n    colorMode: colorMode,\n    size: size,\n    kind: kind,\n    variant: variant,\n    showArrow: Boolean(Number(arrow))\n  };\n  return config;\n};\nexport { getButtonColors, getButtonConfig, getSpacingConfig, getTextStyle };","map":{"version":3,"mappings":"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","names":["buttonTypography","typographyGuide","buttons","getButtonColors","mode","variant","kind","colors","colorGuide","darkComponents","lightComponents","transparentEdge","top","left","primary","edgeColors","secondary","getSize","number","sizeConfig","big","height","padding","iconHeight","medium","small","getSpacingConfig","size","getTextStyle","getButtonConfig","name","colorMode","slice","arrow","config","colorConfig","spacingConfig","showArrow","Boolean","Number"],"sources":["/Users/kumardivyachaitanya/Documents/web devlopment/portfolio-1/node_modules/@cred/neopop-web/src/primitives/buttons.ts"],"sourcesContent":["// Font NameSpaces: b<1><2><3><4><5>\n// 1:\n// d for dark\n// l for light\n\n// 2:\n// p for primary\n// s for secondary\n\n// 3:\n// size - 50, 40, 30\n\n// 4:\n// p - plunk (elevated)\n// f - flat\n\n// 5:\n// 0 -> don't add arrow\n// 1 -> add arrow\n\nimport { colorGuide } from './colors';\nimport { typographyGuide } from './typography';\nimport { ButtonModes, ButtonKinds, ButtonVariants, ButtonSizes } from '../types';\n\nconst buttonTypography = typographyGuide.buttons;\n\nexport const getButtonColors = (mode: ButtonModes, variant: ButtonVariants, kind: ButtonKinds) => {\n    const colors =\n        mode === 'dark' ? colorGuide.darkComponents.buttons : colorGuide.lightComponents.buttons;\n    const transparentEdge =\n        kind === 'elevated'\n            ? {\n                  top: 'transparent',\n                  left: 'transparent',\n              }\n            : {};\n\n    return variant === 'primary'\n        ? {\n              ...colors.primary,\n              mode,\n              edgeColors: { ...colors.primary.edgeColors, ...transparentEdge },\n          }\n        : {\n              ...colors.secondary,\n              mode,\n              edgeColors: { ...colors.secondary.edgeColors, ...transparentEdge },\n          };\n};\n\nconst getSize = (number: string) => {\n    switch (number) {\n        case '50':\n            return 'big';\n\n        case '40':\n            return 'medium';\n\n        case '30':\n            return 'small';\n        default:\n            return 'medium';\n    }\n};\n\nconst sizeConfig = {\n    big: {\n        height: '50px',\n        padding: '0px 30px',\n        iconHeight: '20px',\n    },\n    medium: {\n        height: '40px',\n        padding: '0px 20px',\n        iconHeight: '16px',\n    },\n    small: {\n        height: '30px',\n        padding: '0px 25px',\n        iconHeight: '14px',\n    },\n};\n\nexport const getSpacingConfig = (size: ButtonSizes) => {\n    switch (size) {\n        case 'big':\n            return sizeConfig.big;\n        case 'medium':\n            return sizeConfig.medium;\n        case 'small':\n            return sizeConfig.small;\n        default:\n            return sizeConfig.medium;\n    }\n};\n\nexport const getTextStyle = (size: ButtonSizes) => {\n    switch (size) {\n        case 'big':\n            return buttonTypography.big;\n        case 'medium':\n            return buttonTypography.medium;\n        case 'small':\n            return buttonTypography.small;\n        default:\n            return buttonTypography.medium;\n    }\n};\n\n/** ****************************************************************************************** */\n// New Configs\n\nexport const getButtonConfig = (name: string) => {\n    const colorMode = name.slice(1, 2) === 'l' ? 'light' : 'dark';\n    const variant = name.slice(2, 3) === 's' ? 'secondary' : 'primary';\n    const size = name.slice(3, 5);\n    const kind = name.slice(5, 6) === 'p' ? 'elevated' : 'flat';\n    const arrow = name.slice(6, 7);\n    const config = {\n        colorConfig: getButtonColors(colorMode, variant, kind),\n        spacingConfig: getSpacingConfig(getSize(size)),\n        colorMode,\n        size,\n        kind,\n        variant,\n        showArrow: Boolean(Number(arrow)),\n    };\n    return config;\n};\n"]},"metadata":{},"sourceType":"module"}