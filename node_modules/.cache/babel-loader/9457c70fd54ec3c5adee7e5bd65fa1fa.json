{"ast":null,"code":"import styled, { css } from 'styled-components';\nimport { generateTextStyle } from '../../utils/index.js';\nvar TypographyWrapper = styled.div.withConfig({\n  displayName: \"styles__TypographyWrapper\",\n  componentId: \"sc-12skyof-0\"\n})([\"\", \";\", \";\", \";\"], function (props) {\n  return generateTextStyle(props.fontType, props.fontSize, props.fontWeight, props.color);\n}, function (props) {\n  return props.overflow && css([\"white-space:nowrap;overflow:hidden;text-overflow:\", \";\"], props.overflow);\n}, function (props) {\n  var _props$lineClamp;\n  return props.overflow && props.lineClamp && css([\"display:-webkit-box;-webkit-line-clamp:\", \";-webkit-box-orient:vertical;white-space:break-spaces;\"], (_props$lineClamp = props.lineClamp) !== null && _props$lineClamp !== void 0 ? _props$lineClamp : 1);\n});\nvar ParagraphWrapper = styled.p.withConfig({\n  displayName: \"styles__ParagraphWrapper\",\n  componentId: \"sc-12skyof-1\"\n})([\"\", \";\", \";\", \";\"], function (props) {\n  return generateTextStyle(props.fontType, props.fontSize, props.fontWeight, props.color);\n}, function (props) {\n  return props.overflow && css([\"white-space:nowrap;overflow:hidden;text-overflow:\", \";\"], props.overflow);\n}, function (props) {\n  var _props$lineClamp2;\n  return props.overflow && props.lineClamp && css([\"display:-webkit-box;-webkit-line-clamp:\", \";-webkit-box-orient:vertical;white-space:break-spaces;\"], (_props$lineClamp2 = props.lineClamp) !== null && _props$lineClamp2 !== void 0 ? _props$lineClamp2 : 1);\n});\nvar SpanWrapper = styled.span.withConfig({\n  displayName: \"styles__SpanWrapper\",\n  componentId: \"sc-12skyof-2\"\n})([\"\", \";\", \";\", \";\"], function (props) {\n  return generateTextStyle(props.fontType, props.fontSize, props.fontWeight, props.color);\n}, function (props) {\n  return props.overflow && css([\"white-space:nowrap;overflow:hidden;text-overflow:\", \";\"], props.overflow);\n}, function (props) {\n  var _props$lineClamp3;\n  return props.overflow && props.lineClamp && css([\"display:-webkit-box;-webkit-line-clamp:\", \";-webkit-box-orient:vertical;white-space:break-spaces;\"], (_props$lineClamp3 = props.lineClamp) !== null && _props$lineClamp3 !== void 0 ? _props$lineClamp3 : 1);\n});\nexport { ParagraphWrapper, SpanWrapper, TypographyWrapper };","map":{"version":3,"mappings":";;AAIaA,qBAAiB,GAAGC,MAAM,CAACC,GAAV;EAAAC;EAAAC;AAAA,wBACxB,UAACC,KAAD;EAAA,OAAWC,iBAAiB,CAACD,KAAK,CAACE,QAAP,EAAiBF,KAAK,CAACG,QAAvB,EAAiCH,KAAK,CAACI,UAAvC,EAAmDJ,KAAK,CAACK,KAAzD,CAA5B;AAAA,CADwB,EAExB,UAACL,KAAD;EAAA,OACEA,KAAK,CAACM,QAAN,IACAC,GADA,CAIqBP,iEAAK,CAACM,QAJ3B,CADF;AAAA,CAFwB,EASxB,UAACN,KAAD;EAAA;EAAA,OACEA,KAAK,CAACM,QAAN,IACAN,KAAK,CAACQ,SADN,IAEAD,GAFA,4HAI0BP,KAAK,CAACQ,SAJhC,+DAI6C,CAJ7C,CADF;AAAA,CATwB;AAoBjBC,oBAAgB,GAAGb,MAAM,CAACc,CAAV;EAAAZ;EAAAC;AAAA,wBACvB,UAACC,KAAD;EAAA,OAAWC,iBAAiB,CAACD,KAAK,CAACE,QAAP,EAAiBF,KAAK,CAACG,QAAvB,EAAiCH,KAAK,CAACI,UAAvC,EAAmDJ,KAAK,CAACK,KAAzD,CAA5B;AAAA,CADuB,EAEvB,UAACL,KAAD;EAAA,OACEA,KAAK,CAACM,QAAN,IACAC,GADA,CAIqBP,iEAAK,CAACM,QAJ3B,CADF;AAAA,CAFuB,EASvB,UAACN,KAAD;EAAA;EAAA,OACEA,KAAK,CAACM,QAAN,IACAN,KAAK,CAACQ,SADN,IAEAD,GAFA,6HAI0BP,KAAK,CAACQ,SAJhC,iEAI6C,CAJ7C,CADF;AAAA,CATuB;AAoBhBG,eAAW,GAAGf,MAAM,CAACgB,IAAV;EAAAd;EAAAC;AAAA,wBAClB,UAACC,KAAD;EAAA,OAAWC,iBAAiB,CAACD,KAAK,CAACE,QAAP,EAAiBF,KAAK,CAACG,QAAvB,EAAiCH,KAAK,CAACI,UAAvC,EAAmDJ,KAAK,CAACK,KAAzD,CAA5B;AAAA,CADkB,EAElB,UAACL,KAAD;EAAA,OACEA,KAAK,CAACM,QAAN,IACAC,GADA,CAIqBP,iEAAK,CAACM,QAJ3B,CADF;AAAA,CAFkB,EASlB,UAACN,KAAD;EAAA;EAAA,OACEA,KAAK,CAACM,QAAN,IACAN,KAAK,CAACQ,SADN,IAEAD,GAFA,6HAI0BP,KAAK,CAACQ,SAJhC,iEAI6C,CAJ7C,CADF;AAAA,CATkB","names":["TypographyWrapper","styled","div","displayName","componentId","props","generateTextStyle","fontType","fontSize","fontWeight","color","overflow","css","lineClamp","ParagraphWrapper","p","SpanWrapper","span"],"sources":["/Users/kumardivyachaitanya/Documents/web devlopment/portfolio-1/node_modules/@cred/neopop-web/src/components/Typography/styles.ts"],"sourcesContent":["import styled, { css } from 'styled-components';\nimport { generateTextStyle } from '@utils';\nimport { TypographyProps } from './types';\n\nexport const TypographyWrapper = styled.div<TypographyProps>`\n    ${(props) => generateTextStyle(props.fontType, props.fontSize, props.fontWeight, props.color)};\n    ${(props) =>\n        props.overflow &&\n        css`\n            white-space: nowrap;\n            overflow: hidden;\n            text-overflow: ${props.overflow};\n        `};\n    ${(props) =>\n        props.overflow &&\n        props.lineClamp &&\n        css`\n            display: -webkit-box;\n            -webkit-line-clamp: ${props.lineClamp ?? 1};\n            -webkit-box-orient: vertical;\n            white-space: break-spaces;\n        `};\n`;\n\nexport const ParagraphWrapper = styled.p<TypographyProps>`\n    ${(props) => generateTextStyle(props.fontType, props.fontSize, props.fontWeight, props.color)};\n    ${(props) =>\n        props.overflow &&\n        css`\n            white-space: nowrap;\n            overflow: hidden;\n            text-overflow: ${props.overflow};\n        `};\n    ${(props) =>\n        props.overflow &&\n        props.lineClamp &&\n        css`\n            display: -webkit-box;\n            -webkit-line-clamp: ${props.lineClamp ?? 1};\n            -webkit-box-orient: vertical;\n            white-space: break-spaces;\n        `};\n`;\n\nexport const SpanWrapper = styled.span<TypographyProps>`\n    ${(props) => generateTextStyle(props.fontType, props.fontSize, props.fontWeight, props.color)};\n    ${(props) =>\n        props.overflow &&\n        css`\n            white-space: nowrap;\n            overflow: hidden;\n            text-overflow: ${props.overflow};\n        `};\n    ${(props) =>\n        props.overflow &&\n        props.lineClamp &&\n        css`\n            display: -webkit-box;\n            -webkit-line-clamp: ${props.lineClamp ?? 1};\n            -webkit-box-orient: vertical;\n            white-space: break-spaces;\n        `};\n`;\n"]},"metadata":{},"sourceType":"module"}